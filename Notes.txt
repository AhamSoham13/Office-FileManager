in form add enctype=multipart/form data
multer is not a package . its a middleware

for serving files statically watch
:-https://www.udemy.com/course/nodejs-the-complete-guide/learn/lecture/12036704#overview

watch lec 329 331 for setting headers while downloading files

lecc 334 for deleting using files

----------------------------------------------------------------------------------------
**** so no matter if a function is made with no arguments, 
if we are using it as a middleware, we have to pass req, res
 and next as arguments while calling that function with no arguments?
Is it some rule in node js?

==> ChatGPT
In Node.js and Express.js, middleware functions typically have a specific signature,
 regardless of how the middleware function itself is defined. 
 The signature for Express.js middleware functions is (req, res, next).

When you use middleware in an Express.js application, 
the framework expects these three parameters to be present in 
the middleware function. This is a convention established by 
Express.js for handling the request-response cycle.

Here's the common middleware function signature:

javascript

function middlewareFunction(req, res, next) {
  // Middleware logic here
}
The parameters req (request), res (response), 
and next (callback function to pass control to the next middleware) 
are essential for the middleware to interact with the request and 
response objects and to manage the flow of the application.

When you use a third-party middleware like Multer, you follow the same 
convention. Even if the Multer middleware itself is configured without 
explicitly taking parameters, when you use it in a route handler, you call 
it with (req, res, next):

javascript Code

const upload = multer({
  storage: FileStorage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10 MB (adjust as needed)
  },
}).single('File');

const uploadHandler = (req, res, next) => {
  upload(req, res, (err) => {
    // Middleware logic here
  });
};

router.post('/upload', uploadHandler);
This convention ensures consistency in handling 
middleware across the Express.js framework and its ecosystem.
 It also allows middleware to seamlessly integrate into the 
 request-response flow, making it easier to compose and manage 
 different pieces of functionality in an Express.js application.

 ----------------------------------------------------------------------------------------

 Steps to use http 
 1) make form first 
 2) add httpclientmodule in imports array and top of app.module
 3) import it in services , make an instance using constructor.
 4) make requests eg:- return this.http.delete(`http://127.0.0.1:3000/delete/${File}`);
 5) subscribe where you make this call
 eg:- this.crud.listFiles().subscribe({
  next: (res)=> {
    console.log(res);
  },
  error: (err)=>
  {
    console.log(err);
  },
});

-------------------------------------------------------------------------------------------------------

steps to use template driven form
1) add forms module in imports array of app.module and also add import statement
2)remove action and method attribute from your html form tag 
3)make input of type=button to input of type submit. Whenever its pressed 
it will emit ngsubmit event.
4) listen that event on form tag
so bind ng submit event on it






-------------------------------------------------------------------------------------
One Way Data Binding
{{data}}  String Interpolation =>Component to View Template
we can use ternary operation,expressions, functions which return some value in {{}}

[Property]="data"  Property binding  =>Component to View Template
for:- disabled , hidden, checked string interpolation will not work .hence property binding
bind-property ... another syntax for property binding
[att.attribute_name]=""  syntax for attributr binding


(data)="expression" Event Binding  =>View template to Component
(data)="function($event)"

[(ngModel)] 2 way data binding :- Combination for property binding and event binding
[(ngModel)]="property"  eg:- use to change value property in input tag. replace value with ngmodule
X:- WRONG:- add ngModel in imports and imports array in app.module files from @angular/forms
V:- Correct:- add formsmodule in imports and imports array in app.module files from @angular/forms


------------------------------------------------------------------------------
// app.use(express.static('Documents'));
// app.use(bodyparser.urlencoded({extended:false}));
// app.use(bodyparser.json({type:'application/json'}));
---------------------------------------------------------------------------------
Directives:- Instructions to DOM are Directives
3 types:- 1)Component:- the components we make
          2)Attribute directive:- changes the property for dom elements
            (ngStyle,ngClass)
          3)Structural directive:- adds or removes dom elements
            (Use * before structural directive:-*ngIf,*ngFor,*ngSwitch)
We typically add directive with attribute selector
But technically selector of a directive can be configured like the
selector of a componet . Different types of selectors are
CSS class selector, Attribute Selector , HTML tag selector
SO when we use selector of a component we use it like HTML tag
But in case of directive we use the selector of a directive like a
HTML attribute but technically we can use the selector of directive like a CSS class
or like HTML tag or like an ID selector

use @directive decorator with js object with metadata selector:
directives are also ts classes

while using ngFor you can put ; let i = index to get indices of items iterared

-------------------------------------------------------------------------------
# use ? after property to make it optional

@input  :- import from angular/core
* In child component you can add @Input decorator to a property
and now that property can be used as an attribute on the selector
of this component
* Now in parent component where we use selector of child component 
in template we can use that property from child as attribute
[property]="value from parent" (Custome Property Binding)
* This way data will flow from parent to child .

@Output :- import from angular/core
* from child component to parent component
add decorator on a property of child
# search for event emmiter for making custome events
lec 27
Use custome event binding 


-----------------------------------------------------------------
#@Input properties, are not initialised by the time 
constructor is called
#Also projected content is not available and child component
not constructed by the time  constructor is called

When component is removed from dom we can say its destroyed

LifeCycleHooks:-
ngOnChange,ngOnInit,ngDoCheck,ngAfterContentInit,
ngAfterContentChecked,ngAfterViewInit,ngAfterViewChecked,
ngDestroy

its a good practice to import and impliment LifeCycleHooks
before using

1)ngOnChange:- works with @input:- i.e runs after 
@input property value CHANGES (For same value dosnt run). also can take smallchanges arguments
small changes has properties like previous value, current value, 1st change , etc 
2) ngOnInit:- runs after ngOnChnge only after 1st chnage detection cycle


